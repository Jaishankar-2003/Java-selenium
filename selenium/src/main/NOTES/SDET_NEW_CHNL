DAY 1
------------
LOCATORS
------------
id
name
link text - partial link text
class name
tag name




------------
CUSTOMIZED LOCATORS
______________

CSS SELECTOR
--------------
tag id
tag class
tag attribute
tag class and attribute

XPATH
---------
Absolute xpath
Relative xpath



CSS SELECTOR

tag id    -     tag#id    tag of element , id of element ( # )

tag class    --    tag.classname ( . )          locate group of element  as well single element

tag attribute   -    tag[attribute="value"]

tag class attribute -   tag.classname[attribute = "value"]    locate ( single element specific element )


-------------------------------------------------
css move in 1 direction

xpath move all direction  with -- xpath Axes
--------------------------------------------------
xpath axes
-----------
self
parent
child
ancestor
descendent
following
preceding
following - sibling
preceding - sibling

---------------------------------------------------------------------------------------------------------

## **🔥 XPath Axes – Easy Reference for SDET & Interviews**

### **1. `child::`**

* **Meaning:** Selects **direct children** of the current node.
* **Syntax:**

  ```xpath
  //div[@id='container']/child::input
  ```
* **Shortcut:** `/input` (works the same without `child::`).
* **When to use:** When you know the immediate child structure.
* **Tip:** Won’t go deeper than one level.

---

### **2. `parent::`**

* **Meaning:** Selects the **parent** of the current node.
* **Syntax:**

  ```xpath
  //input[@id='username']/parent::div
  ```
* **When to use:** If you have a child element but need to go **up** to find its parent container.
* **Shortcut:** `/..` (dot-dot means "go to parent").

---

### **3. `ancestor::`**

* **Meaning:** Selects **all parent levels** up to the root (grandparent, great-grandparent, etc.).
* **Syntax:**

  ```xpath
  //input[@id='username']/ancestor::form
  ```
* **When to use:** When you need to climb up the DOM tree to a bigger container.
* **Pro tip:** Great for targeting whole forms or sections when starting from a known element.

---

### **4. `descendant::`**

* **Meaning:** Selects **all levels of children** (child, grandchild, great-grandchild).
* **Syntax:**

  ```xpath
  //div[@id='menu']/descendant::a
  ```
* **Shortcut:** `//a` (double slash already means any level down).
* **When to use:** When you want any nested elements under a container.

---

### **5. `following::`**

* **Meaning:** Selects everything **below and after** the current node in the DOM (not just siblings).
* **Syntax:**

  ```xpath
  //h2[text()='Login']/following::input
  ```
* **When to use:** To get any elements that appear **later** in the page after a known element.

---

### **6. `preceding::`**

* **Meaning:** Selects everything **above and before** the current node in the DOM.
* **Syntax:**

  ```xpath
  //input[@id='password']/preceding::label
  ```
* **When to use:** When you know a field but need to target something that comes before it.

---

### **7. `following-sibling::`**

* **Meaning:** Selects siblings **on the same level** **after** the current element.
* **Syntax:**

  ```xpath
  //label[text()='Username']/following-sibling::input
  ```
* **When to use:** When elements are horizontally aligned in the HTML (same parent).

---

### **8. `preceding-sibling::`**

* **Meaning:** Selects siblings **before** the current element.
* **Syntax:**

  ```xpath
  //input[@id='email']/preceding-sibling::label
  ```
* **When to use:** Useful for form labels located before input fields.

---

### **9. `self::`**

* **Meaning:** Selects the **current node itself**.
* **Syntax:**

  ```xpath
  //input[@id='username']/self::input
  ```
* **When to use:** Rare in practice, but useful when applying conditions on the current element.

---

### **10. `attribute::`**

* **Meaning:** Selects an attribute of a node.
* **Syntax:**

  ```xpath
  //input[@id='username']/attribute::type
  ```
* **Shortcut:** `@type`
* **When to use:** Not often in Selenium, but useful in XML parsing.

---

## **💡 Quick Interview Table:**

| Axis Name             | Moves To                        | Shortcut Available? | Practical Use Case               |
| --------------------- | ------------------------------- | ------------------- | -------------------------------- |
| `child::`             | Direct child elements           | `/`                 | Get inputs inside a div          |
| `parent::`            | Immediate parent                | `/..`               | From field → go to container div |
| `ancestor::`          | All parent levels               | ❌                   | From input → get full form       |
| `descendant::`        | All child levels                | `//`                | Get all nested links in nav      |
| `following::`         | All elements after in DOM       | ❌                   | From heading → get next inputs   |
| `preceding::`         | All elements before in DOM      | ❌                   | From input → find earlier labels |
| `following-sibling::` | Siblings after current element  | ❌                   | Get textboxes after labels       |
| `preceding-sibling::` | Siblings before current element | ❌                   | Get labels before inputs         |
| `self::`              | Current node                    | ❌                   | Rare - for conditions            |
| `attribute::`         | Attribute value                 | `@attrName`         | Get type/id values               |

---

✅ **Memory Trick:**
Think of the DOM as a **family tree**:

* **child**, **parent**, **ancestor**, **descendant** → family relations.
* **following**, **preceding** → time travel up/down the HTML.
* **siblings** → elements with the same parent.
* **self** → “me”.
* **attribute** → “my property”.

---------------------------------------------------------------------------------------------------------------------------------------------

selenium methods
======================

1 get methods
2 conditional methods
3 browser methods
4 navigational methodds
5 wait methods


1 get methods we can access these methods through webdriver instance
-----------------------------------------------------------------------

get(url) opens the url on the browser

getTitle() returns title of the page

getCurrentUrl() retuns URL of the page

getPageSource()- returns source code of the page

getWindowHandle() returns ID of the single Browser window    id should be dynamic : every time it will change

getWindowHandles() retuns ID's of the multiple browser window      get id of multiple windows

    set collection not allow duplicates  ---- > mostly we can use set in get the id of multiple win because every thing have unique values
    list collection allow duplicates

-------------------------------------------------------------------------------------------------------------------------------

Conditional methods () -------> access these commands through Webelement

returns boolean value (true / false)

isDisplayed()  ------> element is visible or not ----- >check display status

isEnable() ---------> check enable/disable status of the element / operational element

isSelected() ------>  check element is selected or not (radio button , check box , drop down also)




















