
TEST NG ------> Test New Generation

java based unit test tool

Adv
-----
1 Test Cases & test suites
2 Grouping of test case
3 Prioritize
4 Parameterization
5 Parallel test
6 Reports

Testng config
-----------------

1 install testng
2 add testng library to build path / add testng dependency in pom.xml

@Test  -----> annotation    [ Replacement of main method ]

testng method not return any thing
1 Testng by default it execute in test case in  alphabetical order                         1 ----->  default - alphabet
2 @Test(priority = num) controls the order of execution                 -                  2 ----->  priority - control execution
3 once you provide priority to the test methods then order of methods , is not considered .3 ----->  in priority order is not matter
4 priorities can be random numbers( no need to have consecutive numbers )                  4 ----->  priority have any num not consecutive
5 if you dont provide priority then default value is zero ( 0 ).                           5 ----->  we dont provide priority defaut is 0
6 if the priorities are same then again execute methods in alphabetical order.             6 ----->  if priority should same alphabet order only again
7 Negative values are allowed in priority.                                                 7 ----->  priority allow negative values also
8 Testng execute test method only if they are having @Test annotation.                     8 ----->  testng work only with @Test annotation.


Execute test cases using testng XML file
------------------------------------------
1 Generate automatically
2 manually

Test suit ------> group of Test cases

Test suite ----> multiple (Test cases) ----> Test steps
Xml file ----> classes ----> Test methods

2 things achived through xml
---------------------
1 execute group of test cases as a 1 suite
2 we can generate test reports (default)



Annotations      --------->   it control the order of execution
------------

Got it ðŸ’¯ â€” hereâ€™s the **short & crisp one-liners**:

    @BeforeMethod** â†’ Runs before each @Test method**.

    @AfterMethod** â†’ Runs after each @Test method**.

    @BeforeClass** â†’ Runs once before the first @Test in the class**.

    @AfterClass** â†’ Runs **once after all @Test in the class**.

    @BeforeTest** â†’ Runs **before all @Test methods inside `<test>` tag in XML**.

*   @AfterTest** â†’ Runs **after all @Test methods inside `<test>` tag in XML**.

    @BeforeSuite** â†’ Runs **once before the entire suite starts**.

*   @AfterSuite** â†’ Runs **once after the entire suite ends**.

---

âš¡ Easy way to remember:

* **Method â†’ around each test method**
* **Class â†’ around class**
* **Test â†’ around `<test>` in XML**
* **Suite â†’ around whole suite**

-------------------------------------------------------------------------------------------------
Annotations
-------------
@Test

@BeforeMethod
@AfterMethod

@BeforeClass  ------> single class
@AfterClass

@BeforeTest   ------> multiple class
@AfterTest

@BeforeSuit
@AfterSuite


Tc1 -----> method
----
1 login ----> @BeforeMethod
2 Search ----> @Test
3 Logout ----> @AfterMethod
4 Login ----> @BeforeMethod
5 Adv Search ----> @Test
6 Logout ---->  @AfterMethod

Tc2  --------> class
----
1 login ----> @BeforeClass
2 Search ----> @Test
5 Adv Search ----> @Test
6  Logout ----> @AfterClass

xml ----> test
------

<suite name="my suit">             ---------> BeforeSuite

    <test name="my test1">        --------> TestBefore
        <classes>
            <class name="abc"/>
        </classes>               ---------> TestAfter
    </test>

    test name="my test2">           --------> TestBefore
            <classes>
                <class name="xyz"/>
            </classes>
        </test>                     ---------> TestAfter

</suite>                        ---------> AfterSuite

===========================================================================================================

Assert is an pre defined class which we used for access tha different type of assertion

Assertion - validation point   ------->   import org.testng.Assert;

2 kind of assertions
---------------------
1 Hard assertion
   --------------
    we can access form Assert class methods are static
    if hard assertion failed the rest of statement will not be executed

Static methods
------------------

Assert.assertEquals();
Assert.assertNotEquals();
Assert.assertTrue(true);
Assert.assertTrue(1==1);
Assert.assertFalse(1==2);

Assert.fail();

why hard assertion is not always recommended ?

void test()
{
    S.o.p("test")
    S.o.p("test")
    Assert.assertEquals(1,2);  if the condition pass all statements will run with out error
                               if the condition fail remaining statements is not run
                               last step only assertion  but 99% of time we use hard assertion
    S.o.p("test")  // not run
    S.o.p("test")  // not run
}
----------------------------------------------------------------------------------------------------------------
2 Soft assertion
  ---------------
  we can access softAssert object
    if soft Assert got fail then rest of the statements still execute

    assert are non static

   SoftAssert sa = new SoftAssert();

   void test()
   {
       S.o.p("test")
       S.o.p("test")

       SoftAssert sa = new SoftAssert();
       sa.assertEquals(1,2);       Even if the condition fail rest of the condition should run and execute the result

       S.o.p("test")
       S.o.p("test")

       sa.assertAll(); // mandatory
   }

