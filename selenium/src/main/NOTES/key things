Alright, let me hit you with the **real-world, no-BS list of Selenium essentials** that automation engineers use daily. If you master these, you’ll handle 80-90% of real-time testing scenarios without breaking a sweat.

---

# **Selenium Real-Time Cheat Sheet for Automation Engineers**

---

## **1. Element Locators (THE backbone)**

* **Best Practice:** Prefer `id`, `name`, `cssSelector`, `xpath`. Avoid `className` if it's dynamic.
* **Must-Know Locators:**

  * `By.id("username")`
  * `By.name("password")`
  * `By.cssSelector("button.login")`
  * `By.xpath("//input[@type='text']")`
  * `By.linkText("Forgot Password?")`
  * `By.partialLinkText("Forgot")`
* **Pro Tip:**
  Use `//tag[contains(@attribute,'value')]` for dynamic elements.

---

## **2. Waits (Avoid flakiness)**

* **Types:**

  * **Implicit Wait:**

    ```java
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    ```
  * **Explicit Wait (Preferred):**

    ```java
    WebDriverWait wait = new WebDriverWait(driver, 10);
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("login")));
    ```
  * **Fluent Wait** for polling.

---

## **3. WebElement Actions**

* **Common methods:**

  * `sendKeys("text")`
  * `click()`
  * `clear()`
  * `getText()`
  * `getAttribute("value")`
  * `isDisplayed()`, `isEnabled()`, `isSelected()`
* **Pro Tip:** Use `Actions` class for advanced interactions:

  ```java
  Actions action = new Actions(driver);
  action.moveToElement(element).click().perform();
  ```

---

## **4. Dropdowns & Multi-Select**

* **Select Class:**

  ```java
  Select dropdown = new Select(driver.findElement(By.id("country")));
  dropdown.selectByVisibleText("India");
  dropdown.selectByValue("IN");
  dropdown.selectByIndex(2);
  ```

---

## **5. Handling Alerts & Pop-ups**

* **Simple Alerts:**

  ```java
  Alert alert = driver.switchTo().alert();
  alert.accept();  // OK
  alert.dismiss(); // Cancel
  String text = alert.getText();
  alert.sendKeys("value"); // For prompt
  ```

---

## **6. Frames & iFrames**

* **Switching:**

  ```java
  driver.switchTo().frame("frameName");
  driver.switchTo().defaultContent(); // Back to main page
  ```

---

## **7. Windows/Tabs**

* **Handle multiple windows:**

  ```java
  String parent = driver.getWindowHandle();
  Set<String> handles = driver.getWindowHandles();
  for (String h : handles) {
      driver.switchTo().window(h);
  }
  ```

---

## **8. Screenshots (For bug evidence)**

```java
File src = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(src, new File("./screenshots/error.png"));
```

---

## **9. Page Navigation**

* **Commands:**

  * `driver.get("url")`
  * `driver.navigate().to("url")`
  * `driver.navigate().back()`
  * `driver.navigate().forward()`
  * `driver.navigate().refresh()`

---

## **10. Data-Driven Testing**

* Use **Excel or CSV** with libraries like **Apache POI** for real-world test data.

---

## **11. Java + Selenium Basics**

* **Important Collections:** `List`, `Set`, `Map` for handling multiple elements.
* **Loops:** For iterating through elements (e.g., list of links).
* **Try-Catch:** To handle exceptions like `NoSuchElementException`.

---

## **12. Real-Time Best Practices**

* **Never hardcode waits** → use explicit waits.
* **Write reusable functions** for common actions like login, click, select dropdown.
* **Use Page Object Model (POM)** for structured automation frameworks.
* **Integrate with TestNG/JUnit** for assertions and test reports.
* **Always validate with `assertEquals` or `assertTrue`.**

---

## **13. Common Interview/Real Scenarios**

* Login → Add item to cart → Verify price → Checkout.
* Handle dynamic elements (`stale element reference`).
* Capture logs/screenshots on failure.
* Parallel execution with **TestNG or Maven-Surefire**.

---

### **Want me to create a “1-PAGE REALTIME SELENIUM PLAYBOOK” (PDF) with these points + code snippets for quick study and interviews?**

I can prepare a **ready-to-print cheat sheet**.
